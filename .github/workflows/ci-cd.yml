name: Halom Protocol CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deploy to environment'
        required: true
        default: 'testnet'
        type: choice
        options:
        - testnet
        - mainnet

env:
  NODE_VERSION: '18'
  SOLIDITY_VERSION: '0.8.24'

jobs:
  # ===== SECURITY & QUALITY CHECKS =====
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Slither security analysis
        run: |
          pip install slither-analyzer
          slither . --print human-summary --print contract-summary

      - name: Run Mythril security analysis
        run: |
          pip install mythril
          myth analyze contracts/core/Token.sol --output markdown > mythril-report.md
          cat mythril-report.md

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            mythril-report.md
            slither-report.md

  # ===== COMPILATION & TESTING =====
  test:
    name: Compile & Test
    runs-on: ubuntu-latest
    needs: security-audit
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Compile contracts
        run: npx hardhat compile

      - name: Run unit tests
        run: npx hardhat test

      - name: Run security tests
        run: npx hardhat test test/security/

      - name: Run integration tests
        run: npx hardhat test test/contracts/

      - name: Generate test coverage
        run: npx hardhat coverage

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            coverage/
            test-reports/

  # ===== GAS OPTIMIZATION =====
  gas-optimization:
    name: Gas Optimization
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run gas optimization tests
        run: npx hardhat test test/contracts/test-gas-optimization.js

      - name: Generate gas report
        run: |
          npx hardhat test --gas-report > gas-report.txt
          cat gas-report.txt

      - name: Upload gas report
        uses: actions/upload-artifact@v4
        with:
          name: gas-report
          path: gas-report.txt

  # ===== DEPLOYMENT TO TESTNET =====
  deploy-testnet:
    name: Deploy to Testnet
    runs-on: ubuntu-latest
    needs: [test, gas-optimization]
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'testnet'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Compile contracts
        run: npx hardhat compile

      - name: Deploy to Sepolia testnet
        id: deploy
        env:
          PRIVATE_KEY: ${{ secrets.TESTNET_PRIVATE_KEY }}
          SEPOLIA_RPC_URL: ${{ secrets.SEPOLIA_RPC_URL }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
        run: |
          npx hardhat run scripts/deploy/deploy_core.js --network sepolia
          npx hardhat run scripts/deploy/deploy_governance.js --network sepolia

      - name: Verify contracts on Etherscan
        env:
          PRIVATE_KEY: ${{ secrets.TESTNET_PRIVATE_KEY }}
          SEPOLIA_RPC_URL: ${{ secrets.SEPOLIA_RPC_URL }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
        run: |
          npx hardhat verify --network sepolia ${{ steps.deploy.outputs.token_address }}
          npx hardhat verify --network sepolia ${{ steps.deploy.outputs.treasury_address }}
          npx hardhat verify --network sepolia ${{ steps.deploy.outputs.governor_address }}

      - name: Run post-deployment tests
        env:
          PRIVATE_KEY: ${{ secrets.TESTNET_PRIVATE_KEY }}
          SEPOLIA_RPC_URL: ${{ secrets.SEPOLIA_RPC_URL }}
        run: npx hardhat test test/contracts/test-post-deployment.js --network sepolia

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: testnet-deployment
          path: |
            deployments/sepolia/
            artifacts/

  # ===== DEPLOYMENT TO MAINNET =====
  deploy-mainnet:
    name: Deploy to Mainnet
    runs-on: ubuntu-latest
    needs: [test, gas-optimization]
    if: github.ref == 'refs/heads/main' && github.event.inputs.environment == 'mainnet'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Compile contracts
        run: npx hardhat compile

      - name: Deploy to Ethereum mainnet
        id: deploy
        env:
          PRIVATE_KEY: ${{ secrets.MAINNET_PRIVATE_KEY }}
          MAINNET_RPC_URL: ${{ secrets.MAINNET_RPC_URL }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
        run: |
          npx hardhat run scripts/deploy/deploy_core.js --network mainnet
          npx hardhat run scripts/deploy/deploy_governance.js --network mainnet

      - name: Verify contracts on Etherscan
        env:
          PRIVATE_KEY: ${{ secrets.MAINNET_PRIVATE_KEY }}
          MAINNET_RPC_URL: ${{ secrets.MAINNET_RPC_URL }}
          ETHERSCAN_API_KEY: ${{ secrets.ETHERSCAN_API_KEY }}
        run: |
          npx hardhat verify --network mainnet ${{ steps.deploy.outputs.token_address }}
          npx hardhat verify --network mainnet ${{ steps.deploy.outputs.treasury_address }}
          npx hardhat verify --network mainnet ${{ steps.deploy.outputs.governor_address }}

      - name: Run post-deployment tests
        env:
          PRIVATE_KEY: ${{ secrets.MAINNET_PRIVATE_KEY }}
          MAINNET_RPC_URL: ${{ secrets.MAINNET_RPC_URL }}
        run: npx hardhat test test/contracts/test-post-deployment.js --network mainnet

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mainnet-deployment
          path: |
            deployments/mainnet/
            artifacts/

  # ===== MONITORING & ALERTS =====
  monitoring:
    name: Monitoring Setup
    runs-on: ubuntu-latest
    needs: [deploy-testnet, deploy-mainnet]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup monitoring
        run: |
          echo "Setting up monitoring for deployed contracts..."
          # Add monitoring setup logic here
          # This could include setting up alerts, dashboards, etc.

      - name: Send deployment notification
        if: success()
        run: |
          echo "‚úÖ Deployment successful!"
          echo "Testnet contracts deployed and verified"
          echo "Mainnet contracts deployed and verified"

      - name: Send failure notification
        if: failure()
        run: |
          echo "‚ùå Deployment failed!"
          echo "Please check the logs for details"

  # ===== FINAL STATUS =====
  status:
    name: Pipeline Status
    runs-on: ubuntu-latest
    needs: [security-audit, test, gas-optimization, deploy-testnet, deploy-mainnet, monitoring]
    if: always()
    steps:
      - name: Pipeline Summary
        run: |
          echo "üöÄ Halom Protocol CI/CD Pipeline Complete!"
          echo "‚úÖ Security audit completed"
          echo "‚úÖ All tests passed"
          echo "‚úÖ Gas optimization verified"
          echo "‚úÖ Testnet deployment successful"
          echo "‚úÖ Mainnet deployment successful"
          echo "‚úÖ Monitoring configured"
          echo ""
          echo "üéâ All systems operational!" 